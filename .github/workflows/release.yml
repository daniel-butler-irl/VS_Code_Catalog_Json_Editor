name: Release Extension

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'  # Trigger only when package.json is modified

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to access tags

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use your project's Node.js version

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Build the Extension
      - name: Build Extension
        run: npm run build

      # Step 5: Extract Current Version from package.json
      - name: Get Current Version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$CURRENT_VERSION"

      # Step 6: Get Previous Tag Version
      - name: Get Previous Tag
        id: previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "0.0.0")
          echo "PREVIOUS_VERSION=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "::set-output name=version::$PREVIOUS_TAG"

      # Step 7: Validate Version Increment
      - name: Validate Version Increment
        id: validate_version
        run: |
          CURRENT_VERSION=$CURRENT_VERSION
          PREVIOUS_VERSION=$PREVIOUS_VERSION
          echo "Comparing current version ($CURRENT_VERSION) with previous version ($PREVIOUS_VERSION)..."
          
          # Install semver for version comparison
          npm install semver

          # Compare versions
          node -e "
            const semver = require('semver');
            if (!semver.gt('$CURRENT_VERSION', '$PREVIOUS_VERSION')) {
              console.error('Error: Current version ($CURRENT_VERSION) is not greater than previous version ($PREVIOUS_VERSION).');
              process.exit(1);
            }
            console.log('Version increment validated.');
          "
        shell: bash

      # Step 8: Install Ruby with Bundler Caching
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'        # Specify the Ruby version you need
          bundler-cache: true        # Enables automatic bundler caching

      # Step 9: Install github-changelog-generator and faraday-retry
      - name: Install Gems
        run: |
          gem install github_changelog_generator
          gem install faraday-retry

            # Step 10: Generate Changelog
      - name: Generate Changelog
        run: |
          github_changelog_generator \
            -u daniel-butler-irl \
            -p VS_Code_Catalog_Json_Editor \
            --future-release "$CURRENT_VERSION" \
            --output CHANGELOG.md \
            --exclude-labels "duplicate,invalid,wontfix" \
            --no-issues \
            --summary-labels "release-summary,summary" \
            --breaking-labels "backwards-incompatible,breaking" \
            --enhancement-labels "feature,enhancement,improvement" \
            --bug-labels "bug" \
            --deprecated-labels "chore,refactor" \
            --issues-label "docs" \
            --security-label "performance" \
            --token "$GITHUB_TOKEN"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}

      # Step 11: Commit and Push CHANGELOG.md
      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: update CHANGELOG for version ${{ env.CURRENT_VERSION }}"
          file_pattern: CHANGELOG.md
          branch: main

      # Step 12: Tag the New Version
      - name: Create Git Tag
        run: |
          git tag $CURRENT_VERSION
          git push origin $CURRENT_VERSION
        shell: bash

      # Step 13: Package the Extension
      - name: Package Extension
        run: npx vsce package
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      # Step 14: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.CURRENT_VERSION }}
          release_name: Release v${{ env.CURRENT_VERSION }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

      # Step 15: Upload .vsix to Release
      - name: Upload .vsix to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ibm-catalog-json-editor-${{ env.CURRENT_VERSION }}.vsix
          asset_name: ibm-catalog-json-editor-${{ env.CURRENT_VERSION }}.vsix
          asset_content_type: application/octet-stream

      # Step 16: Publish to VS Code Marketplace
      - name: Publish to VS Code Marketplace
        run: npx vsce publish --pat ${{ secrets.VSCE_PAT }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
