name: Release Extension

on:
  push:
    branches:
      - main
      - 'releases/**'
    paths:
      - 'package.json'  # Trigger only when package.json is modified

jobs:
  determine_release_type:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.check_version.outputs.is_prerelease }}
      version: ${{ steps.check_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: npm install
        
      - name: Validate Version Format
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if ! node -p "require('semver').valid('$VERSION')" > /dev/null; then
            echo "Error: Invalid version format in package.json: $VERSION"
            exit 1
          fi
        
      - name: Check Version Type
        id: check_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR_VERSION=$(node -p "require('semver').minor(require('./package.json').version)")
          IS_ODD=$((MINOR_VERSION % 2))
          
          if [[ $IS_ODD == 1 ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate Version Strategy
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR_VERSION=$(node -p "require('semver').minor(require('./package.json').version)")
          IS_ODD=$((MINOR_VERSION % 2))
          IS_PREVIEW=$(node -p "require('./package.json').preview || false")
          
          if [[ $IS_ODD == 1 && "$IS_PREVIEW" != "true" ]]; then
            echo "Error: Odd minor versions (x.1.x, x.3.x, etc.) must have preview flag set to true"
            exit 1
          fi
          
          if [[ $IS_ODD == 0 && "$IS_PREVIEW" == "true" ]]; then
            echo "Error: Even minor versions (x.2.x, x.4.x, etc.) cannot have preview flag set to true"
            exit 1
          fi

      - name: Block Preview on Main
        if: github.ref == 'refs/heads/main'
        run: |
          MINOR_VERSION=$(node -p "require('semver').minor(require('./package.json').version)")
          IS_ODD=$((MINOR_VERSION % 2))
          if [[ $IS_ODD == 1 ]]; then
            echo "Error: Main branch can only contain stable releases (even minor versions)"
            exit 1
          fi

  release:
    needs: determine_release_type
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to access tags

      # Step 2: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 5: Build the Extension
      - name: Build Extension
        run: npm run build

      # Step 6: Extract Current Version from package.json
      - name: Get Current Version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      # Step 7: Get Previous Tag Version
      - name: Get Previous Tag
        id: previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "0.0.0")
          echo "PREVIOUS_VERSION=$PREVIOUS_TAG" >> $GITHUB_ENV

      # Step 8: Validate Version Increment
      - name: Validate Version Increment
        id: validate_version
        run: |
          node -e "
            const semver = require('semver');
            const currentVersion = process.env.CURRENT_VERSION;
            const previousVersion = process.env.PREVIOUS_VERSION;
            if (!semver.valid(currentVersion)) {
              console.error('Error: Current version (' + currentVersion + ') is not a valid semver version.');
              process.exit(1);
            }
            if (!semver.valid(previousVersion)) {
              console.error('Error: Previous version (' + previousVersion + ') is not a valid semver version.');
              process.exit(1);
            }
            if (!semver.gt(currentVersion, previousVersion)) {
              console.error('Error: Current version (' + currentVersion + ') is not greater than previous version (' + previousVersion + ').');
              process.exit(1);
            }
            console.log('Version increment validated.');
          "
        env:
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
          PREVIOUS_VERSION: ${{ env.PREVIOUS_VERSION }}

      # Step 9: Install Ruby with Bundler Caching
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      # Step 10: Install github-changelog-generator and faraday-retry
      - name: Install Gems
        run: |
          gem install github_changelog_generator
          gem install faraday-retry

      # Step 11: Generate Changelog
      - name: Generate Changelog
        run: |
          set -e
          
          if [[ "${{ needs.determine_release_type.outputs.is_prerelease }}" == "true" ]]; then
            # For pre-releases, create a simpler changelog focused on development changes
            echo "# Pre-release v$CURRENT_VERSION" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "⚠️ This is a pre-release version for testing purposes." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## Changes since $PREVIOUS_VERSION" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commit messages since last tag
            git log --pretty=format:"* %s" "$PREVIOUS_VERSION"..HEAD | while read -r line; do
              # Only include feat:, fix:, and breaking change commits
              if [[ $line == *"feat:"* ]] || [[ $line == *"fix:"* ]] || [[ $line == *"BREAKING CHANGE"* ]]; then
                echo "$line" >> CHANGELOG.md
              fi
            done
          else
            # For final releases, generate comprehensive changelog including all changes since last stable version
            LAST_STABLE_VERSION=$(git tag -l | grep -v "-" | sort -V | tail -n 1 || echo "0.0.0")
            
            github_changelog_generator \
              --user daniel-butler-irl \
              --project VS_Code_Catalog_Json_Editor \
              --output CHANGELOG.md \
              --future-release "$CURRENT_VERSION" \
              --since-tag "$LAST_STABLE_VERSION" \
              --token "$GITHUB_TOKEN" || {
                echo "Error generating changelog. Creating minimal changelog..."
                echo "# Release v$CURRENT_VERSION" > CHANGELOG.md
                echo "" >> CHANGELOG.md
                echo "## What's Changed" >> CHANGELOG.md
                git log --pretty=format:"* %s" "$LAST_STABLE_VERSION"..HEAD | while read -r line; do
                  if [[ $line == *"feat:"* ]] || [[ $line == *"fix:"* ]] || [[ $line == *"BREAKING CHANGE"* ]]; then
                    echo "$line" >> CHANGELOG.md
                  fi
                done
              }
          fi
          
          # Add notice if no changes were found
          if [ ! -s CHANGELOG.md ]; then
            echo "No significant changes found in this release." >> CHANGELOG.md
          fi
        env:
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
          PREVIOUS_VERSION: ${{ env.PREVIOUS_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Step 12: Commit and Push CHANGELOG.md
      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: update CHANGELOG for version ${{ env.CURRENT_VERSION }}"
          file_pattern: CHANGELOG.md
          branch: ${{ github.ref_name }}

      # Step 13: Check and Create Git Tag
      - name: Create Git Tag
        run: |
          if git rev-parse "$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag $CURRENT_VERSION already exists. Skipping tag creation."
          else
            git tag "$CURRENT_VERSION"
            git push origin "$CURRENT_VERSION"
          fi
        env:
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Step 14: Package the Extension
      - name: Package Extension
        run: npx vsce package
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      # Step 15: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CURRENT_VERSION }}
          name: Release v${{ env.CURRENT_VERSION }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: ${{ needs.determine_release_type.outputs.is_prerelease }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Step 16: Upload .vsix to Release
      - name: Upload .vsix to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ibm-catalog-json-editor-${{ env.CURRENT_VERSION }}.vsix
          asset_name: ibm-catalog-json-editor-${{ env.CURRENT_VERSION }}.vsix
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Step 17: Publish to VS Code Marketplace
      - name: Publish to VS Code Marketplace
        run: |
          if [[ "${{ needs.determine_release_type.outputs.is_prerelease }}" == "true" ]]; then
            npx vsce publish --pre-release --pat ${{ secrets.VSCE_PAT }} ${{ env.CURRENT_VERSION }}
          else
            npx vsce publish --pat ${{ secrets.VSCE_PAT }} ${{ env.CURRENT_VERSION }}
          fi
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
